import argparse
import math
import pefile
import os
import time
#from os import walk
from os import listdir
from os.path import isfile, join

def shannon_entropy(data):
    # 256 different possible values
    possible = dict(((chr(x), 0) for x in range(0, 256)))

    for byte in data:
        possible[chr(byte)] +=1

    data_len = len(data)
    entropy = 0.0

    # compute
    for i in possible:
        if possible[i] == 0:
            continue

        p = float(possible[i] / data_len)
        entropy -= p * math.log(p, 2)
    return entropy

def sections_entropy(path):
    pe = pefile.PE(path)
    sum = 0
    for section in pe.sections[:3]:
        #print(section.Name.decode('utf-8'))
        #print("\tvirtual address: " + hex(section.VirtualAddress))
        #print("\tvirtual size: " + hex(section.Misc_VirtualSize))
        #print("\traw size: " + hex(section.SizeOfRawData))
        #print ("\tentropy: " + str(shannon_entropy(section.get_data())))
        sum += shannon_entropy(section.get_data())
    print (sum / 3)
    pe.close()
    return (sum / 3)

if __name__ == "__main__":
    #parser = argparse.ArgumentParser()
    #parser.add_argument('-f','--file', required = True, help = "target file")
    #args = vars(parser.parse_args())
    target_dir = "./trainingset/live/"
    
    
    
    files = [f for f in listdir(target_dir) if isfile(join(target_dir, f))]
    #for (dirpath, dirnames, filenames) in walk(target_dir):
    #    files.extend(filenames)
    #    break
       
    for file in files:
        try:
            new_name = ""
            new_name = sections_entropy(target_dir + file)
        
            os.rename(target_dir + file , target_dir + str(new_name))
        except:
            pass
    
    
    