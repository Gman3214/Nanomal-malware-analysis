import nltk
import wordninja
nltk.download('words')
from nltk.corpus import words as wn
import string
import re
from threading import Thread
from multiprocessing import Process,Pipe
import psutil


word_dict = wn.words()
len_ordered_word_dict = {3:[],4:[],5:[],6:[],7:[],8:[],9:[],10:[],11:[]}
for word in word_dict:
    if (len(word) >= 3 and len(word) < 11):
        len_ordered_word_dict[len(word)].append(word)
    elif(len(word) > 10):
        len_ordered_word_dict[11].append(word)

raw_string_list = []

def filter_unwanted(conn, string_list):
    
    final = []

    num = 0
    percent = 0

    for raw in string_list:
        num += 1

        if (num >= len(string_list) * 0.1):
            percent += 10
            num = 0
            print("still processing now at " + str(percent) + "%")

        #raw = raw.replace(" ","")

        #check for ip address
        if (re.search("(\D\d{1,3}\W\d{1,3}\W\d{1,3}\W\d{1,3}\D)", raw) != None):
            final.append(raw)
            continue

        #check for directory
        if (re.search("([a-zA-Z]{1}[:][\\/][a-zA-Z0-9_%])", raw) != None):
            final.append(raw)
            continue
        
        #check for file extension
        if (re.search("\w{1,}[.][a-z]{2,5}",raw) != None):
            final.append(raw)
            continue
        
        if (re.search("http[s]{0,1}://\w{2,}[.][a-zA-Z]{1,5}", raw) != None):
            final.append(raw)
            continue

        if (re.search("[a-zA-z]{4,}", raw) == None):
             continue
        
        if (re.search("[a-zA-Z]{27,}", raw) != None):
            continue
        
        

        possible_word = wordninja.split(raw)
        real_word = False 
        for word in possible_word:
            if (len(word) >= 11):
                if (word in len_ordered_word_dict[11]):
                    real_word = True
                    break
            elif (len(word) >= 3 and word in len_ordered_word_dict[len(word)] ): 
                real_word = True
                break
        if real_word:
            final.append(raw)

    print("done")
    #print(final)
    conn.send(final)
    conn.close()
    
        

def main():
    threadAmount = 5

    readable_string = []

    with open("strings.txt", 'r') as string_file:
        for s in string_file:
            raw_string_list.append(s)

    segments = round( len(raw_string_list) / threadAmount )

    processes = []
    pipes = []

    #divides the port range into small segments for each thread
    for index in range(threadAmount):
        #incase the number we divided isnt a natural number we set the last thread to reach the max port number
        print(index)
        start = 0
        end = 0
        substring_list = []
        if index  == threadAmount - 1:
            # start = round (segments * (index + 1) - segments + 1) 
            # end = len(raw_string_list) - 1 
            substring_list = raw_string_list[round (segments * (index + 1) - segments + 1) : len(raw_string_list) - 1 ]
        elif index == 0:
            # start = round (segments * (index + 1) - segments )
            # end = segments * (index + 1)
            substring_list = raw_string_list[round (segments * (index + 1) - segments ): segments * (index + 1)]
            print(str(round (segments * (index + 1) - segments )) + " segmennntntnnt")
        else:
            # start = round (segments * (index + 1) - segments + 1)
            # end = segments * (index + 1)
            substring_list = raw_string_list[round (segments * (index + 1) - segments + 1): segments * (index + 1)]
        print(index)
        #creating the thread and starting it
        parent_conn, child_conn = Pipe(duplex=True)
        micro_process = Process(target = filter_unwanted, args = (child_conn, substring_list,))
        pipes.append(parent_conn)
        processes.append(micro_process)
    
    num = 0
    for process in processes:
        print(num)
        num += 1
        process.start()

    for conn in pipes:
        if conn != None and conn != []:
            new_list = conn.recv()
            print("here1")
            readable_string.extend(new_list)
            #print(new_list)
            #pipes.remove(conn)

    print(readable_string)
    
    # once finshed tell the threads to close
    for process in processes:
        print("here2")
        process.join()
    
    with open("readable strings.txt", "w") as f:
        for string in readable_string:
            print("here3")
            f.write(string + "\n")
    
    



if __name__ == "__main__":
    main()